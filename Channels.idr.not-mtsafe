-- Idris 2

module Channels

import System
import Data.List
import Data.IORef
import System.Concurrency.Raw


||| A "box" for containing any type. Useful for sending things.
export
record Box where
  constructor MkBox
  contents : ty

-- The book relies on Box being named "Message". That's probably a better name,
-- come to think of it...
export
Message : Type
Message = Box

||| Can't show the contents, since they could be anything
Show Box where
  show b = "Box"

||| Pack something in a Box. Once something is in a box, there is no way to
||| safely get it out, since boxes can contain anything!
export
pack : (item : ty) -> Box
pack item = MkBox item

||| Unpack a Box, specifying the type of the contents. Since boxes could arrive
||| from anywhere, there is no guarantee that the box will actually contain the
||| expected type of content, hence it is unsafe to unpack a box.
export
unsafeUnpack : Box -> (t : Type) -> (content : t)
unsafeUnpack box t = believe_me $ contents box

Stack : Type
Stack = List Box

emptyStack : Stack
emptyStack = []

||| Create a new, empty Stack.
newStack : IO (IORef Stack)
newStack = newIORef emptyStack

namespace Stack
  export
  ||| Place a Box containing something at the top of the Stack pointed to by the
  ||| IORef.
  push : (sRef : IORef Stack) -> (item : Box) -> IO ()
  push sRef item = modifyIORef sRef ((::) item)

  export
  ||| Retrieve and remove the top Box in the Stack pointed to by the IORef, if
  ||| there is one.
  pop : (sRef : IORef Stack) -> IO (Maybe Box)
  pop sRef = do stack <- readIORef sRef
                case stack of
                     []        => pure Nothing
                     (b :: bs) => do writeIORef sRef bs
                                     pure (Just b)

  export
  ||| Retrieve the Box at the top of the Stack pointed to by the IORef, if there
  ||| is one, _without_ removing it from the top of the Stack.
  peek : (sRef : IORef Stack) -> IO (Maybe Box)
  peek sRef = do stack <- readIORef sRef
                 case stack of
                      []        => pure Nothing
                      (b :: bs) => pure (Just b)

  export
  ||| Replace the Stack pointed to by the IORef with an empty Stack.
  clear : (sRef : IORef Stack) -> IO ()
  clear sRef = writeIORef sRef emptyStack

||| A queue made of 2 stacks, as per the "Purely Functional Data Structures"
||| book.
record Queue where
  constructor MkQueue
  front : IORef Stack
  rear : IORef Stack

||| Create a new, empty Queue.
newQueue : IO (IORef Queue)
newQueue = do f <- newStack
              r <- newStack
              newIORef (MkQueue f r)

namespace Queue
  export
  ||| Put a box containing something, in the queue.
  enqueue : (qRef : IORef Queue) -> (item : Box) -> IO ()
  enqueue qRef item = do queue <- readIORef qRef
                         push (rear queue) item

  ||| Set the Stack in fRef to the newFront and clear the Stack in the rRef
  frontChange : (newFront : Stack) ->
                (fRef : IORef Stack) ->
                (rRef : IORef Stack) ->
                IO ()
  frontChange newFront fRef rRef = do writeIORef fRef newFront
                                      clear rRef

  ||| Retrieve and remove the first element in the queue, if there is one. This
  ||| operation is mostly O(1), occasionally being O(n) if there is only one
  ||| item in the queue and there are multiple items in the backlog.
  export
  dequeue : (qRef : IORef Queue) -> IO (Maybe Box)
  dequeue qRef
    = do queue <- readIORef qRef
         let fRef = front queue
         let rRef = rear queue
         f <- readIORef fRef
         case f of
              []        => do r <- readIORef rRef
                              let f' = reverse r
                              case f' of
                                   []        => pure Nothing
                                   (b :: bs) => do frontChange bs fRef rRef
                                                   pure (Just b)

              [b]       => do r <- readIORef rRef
                              case r of
                                   []   => clear fRef
                                   [rB] => frontChange [rB] fRef rRef
                                   _    => do let f' = reverse r
                                              frontChange f' fRef rRef
                              pure (Just b)

              (b :: bs) => do writeIORef fRef bs
                              pure (Just b)

  ||| Retrieve the first element in the queue, if there is one, _without_
  ||| removing it. This operation is mostly O(1), occasionally being O(n) if
  ||| there is only one item in the queue and there are any items in the
  ||| backlog.
  export
  peek : (qRef : IORef Queue) -> IO (Maybe Box)
  peek qRef
    = do queue <- readIORef qRef
         let fRef = front queue
         let rRef = rear queue
         f <- readIORef fRef
         case f of
              []        => do r <- readIORef rRef
                              let f' = reverse r
                              case f' of
                                   []        => pure Nothing
                                   (b :: bs) =>
                                        do frontChange (b :: bs) fRef rRef
                                           pure (Just b)

              [b]       => do r <- readIORef rRef
                              case r of
                                   []   => pure (Just b)
                                   _    => do let f' = reverse r
                                              frontChange (b :: f') fRef rRef
                                              pure (Just b)

              (b :: bs) => pure (Just b)

||| A channel consists of two Queues:
|||   - an inbox
|||   - and an outbox
export
record Channel where
  constructor MkChannel
  inbox : IORef Queue
  outbox : IORef Queue

||| Create a new Channel, with an empty inbox and outbox.
export
newChannel : IO (IORef Channel)
newChannel = do ibox <- newQueue
                obox <- newQueue
                newIORef (MkChannel ibox obox)

namespace Channel
  ||| Send a Box through a Channel.
  export
  send : (chan : Channel) -> (item : Box) -> IO ()
  send chan item = enqueue (outbox chan) item

  ||| Receive a Box from a Channel, if any have arrived in its inbox.
  export
  receive : (chan : Channel) -> IO (Maybe Box)
  receive chan = do mBox <- dequeue (inbox chan)
                    pure mBox

  ||| Check if any Boxes have arrived in the Channel's inbox
  export
  hasNext : (chan : Channel) -> IO Bool
  hasNext chan = do mBox <- peek (inbox chan)
                    case mBox of
                         Nothing  => pure False
                         (Just _) => pure True

  -- might be able to use NonEmpty proof for this instead?
  awaitNothingError : IO (Box)
  awaitNothingError = do putStrLn "ERROR: Somehow got 'Nothing' in await."
                         ?awaitErrorNothing

  ||| Wait for a result to arrive, potentially forever
  export
  partial
  await : Channel -> IO (Box)
  await c = do hn <- hasNext c
               if hn
                  then do mBox <- receive c
                          case mBox of 
                               Nothing => awaitNothingError
                               Just box => pure box
                  else await c

  ||| Wait for a result to arrive, stopping after `timeout` seconds
  export
  awaitTimeout : Channel -> (timeout : Nat) ->  IO (Maybe Box)
  awaitTimeout c 0 = do hn <- hasNext c
                        if hn
                           then do mBox <- receive c
                                   case mBox of
                                        Nothing  => do awaitNothingError
                                                       pure Nothing
                                        Just box => pure mBox
                           else pure Nothing
  awaitTimeout c (S k) = do hn <- hasNext c
                            if hn
                               then receive c
                               else do sleep 1
                                       awaitTimeout c k

-- IORef version of Channel functions. Is it necessary?/Is it better to not have
-- Channels in IORefs?...
--namespace Channel
--  export
--  ||| Send a Box to the outbox of the Channel.
--  send : (cRef : IORef Channel) -> (item : Box) -> IO ()
--  send cRef item = do chan <- readIORef cRef
--                      enqueue (outbox chan) item
--                      -- the item ends up in the right position, thanks to the
--                      -- 2 stacks underlying the whole thing
--
--  export
--  ||| Receive a Box from the Channel, if any have arrived in the inbox.
--  receive : (cRef : IORef Channel) -> IO (Maybe Box)
--  receive cRef = do chan <- readIORef cRef
--                    box <- dequeue (inbox chan)
--                    pure box
--
--  export
--  ||| Check if any boxes have arrived in the inbox.
--  hasNext : (cRef : IORef Channel) -> IO Bool
--  hasNext cRef = do chan <- readIORef cRef
--                    nextBox <- peek (inbox chan)
--                    case nextBox of
--                         Nothing  => pure False
--                         (Just b) => pure True

export
||| Threads and processes are not the same, I know. But for the sake of
||| consistency with the book, they will be treated as such.
PID : Type
PID = ThreadID

export
||| Get the PID of this process.
myPID : IO PID
myPID = threadID

export
||| Given a sequence of IO actions to perform, spawns a new process for
||| executing these and returns its Process ID
spawn : (prog : IO ()) -> IO PID
spawn = fork

export
||| Given a reference to a Channel (usually obtained through `newChannel`),
||| get a version to use as part of a "sender" process, i.e. mainly sends, but
||| may receive Boxes from the receiver as well.
makeSender : IORef Channel -> IO Channel
makeSender cRef = do c <- readIORef cRef
                     let i = inbox c
                     let o = outbox c
                     pure (MkChannel i o)

export
||| Given a reference to a Channel (usually obtained through `newChannel`), get
||| a version to use as part of a "receiver" process, i.e. mainly receives, but
||| may send Boxes to the sender as well.
makeReceiver : IORef Channel -> IO Channel
makeReceiver cRef = do c <- readIORef cRef
                       let i = outbox c
                       let o = inbox c
                       pure (MkChannel i o)

--connect : IO () -> IO (Channel)

export
makeSenderRef : IORef Channel -> IO (IORef Channel)
makeSenderRef cRef = do c <- readIORef cRef
                        let i = inbox c
                        let o = outbox c
                        newIORef (MkChannel i o)

export
makeReceiverRef : IORef Channel -> IO (IORef Channel)
makeReceiverRef cRef = do c <- readIORef cRef
                          let i = outbox c
                          let o = inbox c
                          newIORef (MkChannel i o)

-- connect functions?



-- Testing how nested IORefs work
--test : IO ()
--test = do qRef <- newQueue
--          q <- readIORef qRef
--          let rRef = rear q
--          r <- readIORef rRef
--          putStrLn $ show r
--          modifyIORef rRef ((::) (MkBox 1))
--          q' <- readIORef qRef
--          r' <- readIORef (rear q')
--          r <- readIORef rRef
--          putStrLn $ show r
--          putStrLn $ show r'

